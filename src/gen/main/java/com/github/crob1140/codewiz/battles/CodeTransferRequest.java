// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: code_interpreter.proto

package com.github.crob1140.codewiz.battles;

/**
 * Protobuf type {@code CodeTransferRequest}
 */
public  final class CodeTransferRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:CodeTransferRequest)
    CodeTransferRequestOrBuilder {
  // Use CodeTransferRequest.newBuilder() to construct.
  private CodeTransferRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CodeTransferRequest() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CodeTransferRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.github.crob1140.filetransfer.UploadRequest.Builder subBuilder = null;
            if (transferCase_ == 1) {
              subBuilder = ((com.github.crob1140.filetransfer.UploadRequest) transfer_).toBuilder();
            }
            transfer_ =
                input.readMessage(com.github.crob1140.filetransfer.UploadRequest.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.github.crob1140.filetransfer.UploadRequest) transfer_);
              transfer_ = subBuilder.buildPartial();
            }
            transferCase_ = 1;
            break;
          }
          case 18: {
            com.github.crob1140.codewiz.battles.RepoDetails.Builder subBuilder = null;
            if (transferCase_ == 2) {
              subBuilder = ((com.github.crob1140.codewiz.battles.RepoDetails) transfer_).toBuilder();
            }
            transfer_ =
                input.readMessage(com.github.crob1140.codewiz.battles.RepoDetails.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.github.crob1140.codewiz.battles.RepoDetails) transfer_);
              transfer_ = subBuilder.buildPartial();
            }
            transferCase_ = 2;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.crob1140.codewiz.battles.CodeInterpreter.internal_static_CodeTransferRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.crob1140.codewiz.battles.CodeInterpreter.internal_static_CodeTransferRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.crob1140.codewiz.battles.CodeTransferRequest.class, com.github.crob1140.codewiz.battles.CodeTransferRequest.Builder.class);
  }

  private int transferCase_ = 0;
  private java.lang.Object transfer_;
  public enum TransferCase
      implements com.google.protobuf.Internal.EnumLite {
    UPLOAD_REQUEST(1),
    REPO_DETAILS(2),
    TRANSFER_NOT_SET(0);
    private final int value;
    private TransferCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TransferCase valueOf(int value) {
      return forNumber(value);
    }

    public static TransferCase forNumber(int value) {
      switch (value) {
        case 1: return UPLOAD_REQUEST;
        case 2: return REPO_DETAILS;
        case 0: return TRANSFER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TransferCase
  getTransferCase() {
    return TransferCase.forNumber(
        transferCase_);
  }

  public static final int UPLOAD_REQUEST_FIELD_NUMBER = 1;
  /**
   * <code>optional .UploadRequest upload_request = 1;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequest getUploadRequest() {
    if (transferCase_ == 1) {
       return (com.github.crob1140.filetransfer.UploadRequest) transfer_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
  }
  /**
   * <code>optional .UploadRequest upload_request = 1;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequestOrBuilder getUploadRequestOrBuilder() {
    if (transferCase_ == 1) {
       return (com.github.crob1140.filetransfer.UploadRequest) transfer_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
  }

  public static final int REPO_DETAILS_FIELD_NUMBER = 2;
  /**
   * <code>optional .RepoDetails repo_details = 2;</code>
   */
  public com.github.crob1140.codewiz.battles.RepoDetails getRepoDetails() {
    if (transferCase_ == 2) {
       return (com.github.crob1140.codewiz.battles.RepoDetails) transfer_;
    }
    return com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
  }
  /**
   * <code>optional .RepoDetails repo_details = 2;</code>
   */
  public com.github.crob1140.codewiz.battles.RepoDetailsOrBuilder getRepoDetailsOrBuilder() {
    if (transferCase_ == 2) {
       return (com.github.crob1140.codewiz.battles.RepoDetails) transfer_;
    }
    return com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (transferCase_ == 1) {
      output.writeMessage(1, (com.github.crob1140.filetransfer.UploadRequest) transfer_);
    }
    if (transferCase_ == 2) {
      output.writeMessage(2, (com.github.crob1140.codewiz.battles.RepoDetails) transfer_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (transferCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.github.crob1140.filetransfer.UploadRequest) transfer_);
    }
    if (transferCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.github.crob1140.codewiz.battles.RepoDetails) transfer_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.crob1140.codewiz.battles.CodeTransferRequest)) {
      return super.equals(obj);
    }
    com.github.crob1140.codewiz.battles.CodeTransferRequest other = (com.github.crob1140.codewiz.battles.CodeTransferRequest) obj;

    boolean result = true;
    result = result && getTransferCase().equals(
        other.getTransferCase());
    if (!result) return false;
    switch (transferCase_) {
      case 1:
        result = result && getUploadRequest()
            .equals(other.getUploadRequest());
        break;
      case 2:
        result = result && getRepoDetails()
            .equals(other.getRepoDetails());
        break;
      case 0:
      default:
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    switch (transferCase_) {
      case 1:
        hash = (37 * hash) + UPLOAD_REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getUploadRequest().hashCode();
        break;
      case 2:
        hash = (37 * hash) + REPO_DETAILS_FIELD_NUMBER;
        hash = (53 * hash) + getRepoDetails().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.crob1140.codewiz.battles.CodeTransferRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.crob1140.codewiz.battles.CodeTransferRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code CodeTransferRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:CodeTransferRequest)
      com.github.crob1140.codewiz.battles.CodeTransferRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.crob1140.codewiz.battles.CodeInterpreter.internal_static_CodeTransferRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.crob1140.codewiz.battles.CodeInterpreter.internal_static_CodeTransferRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.crob1140.codewiz.battles.CodeTransferRequest.class, com.github.crob1140.codewiz.battles.CodeTransferRequest.Builder.class);
    }

    // Construct using com.github.crob1140.codewiz.battles.CodeTransferRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      transferCase_ = 0;
      transfer_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.crob1140.codewiz.battles.CodeInterpreter.internal_static_CodeTransferRequest_descriptor;
    }

    public com.github.crob1140.codewiz.battles.CodeTransferRequest getDefaultInstanceForType() {
      return com.github.crob1140.codewiz.battles.CodeTransferRequest.getDefaultInstance();
    }

    public com.github.crob1140.codewiz.battles.CodeTransferRequest build() {
      com.github.crob1140.codewiz.battles.CodeTransferRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.github.crob1140.codewiz.battles.CodeTransferRequest buildPartial() {
      com.github.crob1140.codewiz.battles.CodeTransferRequest result = new com.github.crob1140.codewiz.battles.CodeTransferRequest(this);
      if (transferCase_ == 1) {
        if (uploadRequestBuilder_ == null) {
          result.transfer_ = transfer_;
        } else {
          result.transfer_ = uploadRequestBuilder_.build();
        }
      }
      if (transferCase_ == 2) {
        if (repoDetailsBuilder_ == null) {
          result.transfer_ = transfer_;
        } else {
          result.transfer_ = repoDetailsBuilder_.build();
        }
      }
      result.transferCase_ = transferCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.crob1140.codewiz.battles.CodeTransferRequest) {
        return mergeFrom((com.github.crob1140.codewiz.battles.CodeTransferRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.crob1140.codewiz.battles.CodeTransferRequest other) {
      if (other == com.github.crob1140.codewiz.battles.CodeTransferRequest.getDefaultInstance()) return this;
      switch (other.getTransferCase()) {
        case UPLOAD_REQUEST: {
          mergeUploadRequest(other.getUploadRequest());
          break;
        }
        case REPO_DETAILS: {
          mergeRepoDetails(other.getRepoDetails());
          break;
        }
        case TRANSFER_NOT_SET: {
          break;
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.crob1140.codewiz.battles.CodeTransferRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.crob1140.codewiz.battles.CodeTransferRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int transferCase_ = 0;
    private java.lang.Object transfer_;
    public TransferCase
        getTransferCase() {
      return TransferCase.forNumber(
          transferCase_);
    }

    public Builder clearTransfer() {
      transferCase_ = 0;
      transfer_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest, com.github.crob1140.filetransfer.UploadRequest.Builder, com.github.crob1140.filetransfer.UploadRequestOrBuilder> uploadRequestBuilder_;
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest getUploadRequest() {
      if (uploadRequestBuilder_ == null) {
        if (transferCase_ == 1) {
          return (com.github.crob1140.filetransfer.UploadRequest) transfer_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
      } else {
        if (transferCase_ == 1) {
          return uploadRequestBuilder_.getMessage();
        }
        return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public Builder setUploadRequest(com.github.crob1140.filetransfer.UploadRequest value) {
      if (uploadRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transfer_ = value;
        onChanged();
      } else {
        uploadRequestBuilder_.setMessage(value);
      }
      transferCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public Builder setUploadRequest(
        com.github.crob1140.filetransfer.UploadRequest.Builder builderForValue) {
      if (uploadRequestBuilder_ == null) {
        transfer_ = builderForValue.build();
        onChanged();
      } else {
        uploadRequestBuilder_.setMessage(builderForValue.build());
      }
      transferCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public Builder mergeUploadRequest(com.github.crob1140.filetransfer.UploadRequest value) {
      if (uploadRequestBuilder_ == null) {
        if (transferCase_ == 1 &&
            transfer_ != com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance()) {
          transfer_ = com.github.crob1140.filetransfer.UploadRequest.newBuilder((com.github.crob1140.filetransfer.UploadRequest) transfer_)
              .mergeFrom(value).buildPartial();
        } else {
          transfer_ = value;
        }
        onChanged();
      } else {
        if (transferCase_ == 1) {
          uploadRequestBuilder_.mergeFrom(value);
        }
        uploadRequestBuilder_.setMessage(value);
      }
      transferCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public Builder clearUploadRequest() {
      if (uploadRequestBuilder_ == null) {
        if (transferCase_ == 1) {
          transferCase_ = 0;
          transfer_ = null;
          onChanged();
        }
      } else {
        if (transferCase_ == 1) {
          transferCase_ = 0;
          transfer_ = null;
        }
        uploadRequestBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.Builder getUploadRequestBuilder() {
      return getUploadRequestFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequestOrBuilder getUploadRequestOrBuilder() {
      if ((transferCase_ == 1) && (uploadRequestBuilder_ != null)) {
        return uploadRequestBuilder_.getMessageOrBuilder();
      } else {
        if (transferCase_ == 1) {
          return (com.github.crob1140.filetransfer.UploadRequest) transfer_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest upload_request = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest, com.github.crob1140.filetransfer.UploadRequest.Builder, com.github.crob1140.filetransfer.UploadRequestOrBuilder> 
        getUploadRequestFieldBuilder() {
      if (uploadRequestBuilder_ == null) {
        if (!(transferCase_ == 1)) {
          transfer_ = com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
        }
        uploadRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.crob1140.filetransfer.UploadRequest, com.github.crob1140.filetransfer.UploadRequest.Builder, com.github.crob1140.filetransfer.UploadRequestOrBuilder>(
                (com.github.crob1140.filetransfer.UploadRequest) transfer_,
                getParentForChildren(),
                isClean());
        transfer_ = null;
      }
      transferCase_ = 1;
      onChanged();;
      return uploadRequestBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.codewiz.battles.RepoDetails, com.github.crob1140.codewiz.battles.RepoDetails.Builder, com.github.crob1140.codewiz.battles.RepoDetailsOrBuilder> repoDetailsBuilder_;
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public com.github.crob1140.codewiz.battles.RepoDetails getRepoDetails() {
      if (repoDetailsBuilder_ == null) {
        if (transferCase_ == 2) {
          return (com.github.crob1140.codewiz.battles.RepoDetails) transfer_;
        }
        return com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
      } else {
        if (transferCase_ == 2) {
          return repoDetailsBuilder_.getMessage();
        }
        return com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
      }
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public Builder setRepoDetails(com.github.crob1140.codewiz.battles.RepoDetails value) {
      if (repoDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        transfer_ = value;
        onChanged();
      } else {
        repoDetailsBuilder_.setMessage(value);
      }
      transferCase_ = 2;
      return this;
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public Builder setRepoDetails(
        com.github.crob1140.codewiz.battles.RepoDetails.Builder builderForValue) {
      if (repoDetailsBuilder_ == null) {
        transfer_ = builderForValue.build();
        onChanged();
      } else {
        repoDetailsBuilder_.setMessage(builderForValue.build());
      }
      transferCase_ = 2;
      return this;
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public Builder mergeRepoDetails(com.github.crob1140.codewiz.battles.RepoDetails value) {
      if (repoDetailsBuilder_ == null) {
        if (transferCase_ == 2 &&
            transfer_ != com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance()) {
          transfer_ = com.github.crob1140.codewiz.battles.RepoDetails.newBuilder((com.github.crob1140.codewiz.battles.RepoDetails) transfer_)
              .mergeFrom(value).buildPartial();
        } else {
          transfer_ = value;
        }
        onChanged();
      } else {
        if (transferCase_ == 2) {
          repoDetailsBuilder_.mergeFrom(value);
        }
        repoDetailsBuilder_.setMessage(value);
      }
      transferCase_ = 2;
      return this;
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public Builder clearRepoDetails() {
      if (repoDetailsBuilder_ == null) {
        if (transferCase_ == 2) {
          transferCase_ = 0;
          transfer_ = null;
          onChanged();
        }
      } else {
        if (transferCase_ == 2) {
          transferCase_ = 0;
          transfer_ = null;
        }
        repoDetailsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public com.github.crob1140.codewiz.battles.RepoDetails.Builder getRepoDetailsBuilder() {
      return getRepoDetailsFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    public com.github.crob1140.codewiz.battles.RepoDetailsOrBuilder getRepoDetailsOrBuilder() {
      if ((transferCase_ == 2) && (repoDetailsBuilder_ != null)) {
        return repoDetailsBuilder_.getMessageOrBuilder();
      } else {
        if (transferCase_ == 2) {
          return (com.github.crob1140.codewiz.battles.RepoDetails) transfer_;
        }
        return com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
      }
    }
    /**
     * <code>optional .RepoDetails repo_details = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.codewiz.battles.RepoDetails, com.github.crob1140.codewiz.battles.RepoDetails.Builder, com.github.crob1140.codewiz.battles.RepoDetailsOrBuilder> 
        getRepoDetailsFieldBuilder() {
      if (repoDetailsBuilder_ == null) {
        if (!(transferCase_ == 2)) {
          transfer_ = com.github.crob1140.codewiz.battles.RepoDetails.getDefaultInstance();
        }
        repoDetailsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.crob1140.codewiz.battles.RepoDetails, com.github.crob1140.codewiz.battles.RepoDetails.Builder, com.github.crob1140.codewiz.battles.RepoDetailsOrBuilder>(
                (com.github.crob1140.codewiz.battles.RepoDetails) transfer_,
                getParentForChildren(),
                isClean());
        transfer_ = null;
      }
      transferCase_ = 2;
      onChanged();;
      return repoDetailsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:CodeTransferRequest)
  }

  // @@protoc_insertion_point(class_scope:CodeTransferRequest)
  private static final com.github.crob1140.codewiz.battles.CodeTransferRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.crob1140.codewiz.battles.CodeTransferRequest();
  }

  public static com.github.crob1140.codewiz.battles.CodeTransferRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CodeTransferRequest>
      PARSER = new com.google.protobuf.AbstractParser<CodeTransferRequest>() {
    public CodeTransferRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CodeTransferRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CodeTransferRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CodeTransferRequest> getParserForType() {
    return PARSER;
  }

  public com.github.crob1140.codewiz.battles.CodeTransferRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

