// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer.proto

package com.github.crob1140.filetransfer;

/**
 * Protobuf type {@code UploadRequest}
 */
public  final class UploadRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:UploadRequest)
    UploadRequestOrBuilder {
  // Use UploadRequest.newBuilder() to construct.
  private UploadRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UploadRequest() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private UploadRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder subBuilder = null;
            if (valueCase_ == 1) {
              subBuilder = ((com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.github.crob1140.filetransfer.UploadRequest.FileMetadata.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 1;
            break;
          }
          case 18: {
            com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder subBuilder = null;
            if (valueCase_ == 2) {
              subBuilder = ((com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.github.crob1140.filetransfer.UploadRequest.FileChunk.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 2;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.crob1140.filetransfer.UploadRequest.class, com.github.crob1140.filetransfer.UploadRequest.Builder.class);
  }

  public interface FileMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:UploadRequest.FileMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int64 size = 2;</code>
     */
    long getSize();
  }
  /**
   * Protobuf type {@code UploadRequest.FileMetadata}
   */
  public  static final class FileMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:UploadRequest.FileMetadata)
      FileMetadataOrBuilder {
    // Use FileMetadata.newBuilder() to construct.
    private FileMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FileMetadata() {
      name_ = "";
      size_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FileMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {

              size_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileMetadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.crob1140.filetransfer.UploadRequest.FileMetadata.class, com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private long size_;
    /**
     * <code>optional int64 size = 2;</code>
     */
    public long getSize() {
      return size_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (size_ != 0L) {
        output.writeInt64(2, size_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (size_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, size_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.crob1140.filetransfer.UploadRequest.FileMetadata)) {
        return super.equals(obj);
      }
      com.github.crob1140.filetransfer.UploadRequest.FileMetadata other = (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && (getSize()
          == other.getSize());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSize());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.crob1140.filetransfer.UploadRequest.FileMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code UploadRequest.FileMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:UploadRequest.FileMetadata)
        com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileMetadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.crob1140.filetransfer.UploadRequest.FileMetadata.class, com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder.class);
      }

      // Construct using com.github.crob1140.filetransfer.UploadRequest.FileMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        size_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileMetadata_descriptor;
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileMetadata getDefaultInstanceForType() {
        return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileMetadata build() {
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileMetadata buildPartial() {
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata result = new com.github.crob1140.filetransfer.UploadRequest.FileMetadata(this);
        result.name_ = name_;
        result.size_ = size_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.crob1140.filetransfer.UploadRequest.FileMetadata) {
          return mergeFrom((com.github.crob1140.filetransfer.UploadRequest.FileMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.crob1140.filetransfer.UploadRequest.FileMetadata other) {
        if (other == com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getSize() != 0L) {
          setSize(other.getSize());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private long size_ ;
      /**
       * <code>optional int64 size = 2;</code>
       */
      public long getSize() {
        return size_;
      }
      /**
       * <code>optional int64 size = 2;</code>
       */
      public Builder setSize(long value) {
        
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 size = 2;</code>
       */
      public Builder clearSize() {
        
        size_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:UploadRequest.FileMetadata)
    }

    // @@protoc_insertion_point(class_scope:UploadRequest.FileMetadata)
    private static final com.github.crob1140.filetransfer.UploadRequest.FileMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.crob1140.filetransfer.UploadRequest.FileMetadata();
    }

    public static com.github.crob1140.filetransfer.UploadRequest.FileMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FileMetadata>
        PARSER = new com.google.protobuf.AbstractParser<FileMetadata>() {
      public FileMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FileMetadata(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FileMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FileMetadata> getParserForType() {
      return PARSER;
    }

    public com.github.crob1140.filetransfer.UploadRequest.FileMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FileChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:UploadRequest.FileChunk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bytes data = 1;</code>
     */
    com.google.protobuf.ByteString getData();

    /**
     * <code>optional int64 position = 2;</code>
     */
    long getPosition();
  }
  /**
   * Protobuf type {@code UploadRequest.FileChunk}
   */
  public  static final class FileChunk extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:UploadRequest.FileChunk)
      FileChunkOrBuilder {
    // Use FileChunk.newBuilder() to construct.
    private FileChunk(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FileChunk() {
      data_ = com.google.protobuf.ByteString.EMPTY;
      position_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FileChunk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {

              data_ = input.readBytes();
              break;
            }
            case 16: {

              position_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileChunk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileChunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.crob1140.filetransfer.UploadRequest.FileChunk.class, com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder.class);
    }

    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 1;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    public static final int POSITION_FIELD_NUMBER = 2;
    private long position_;
    /**
     * <code>optional int64 position = 2;</code>
     */
    public long getPosition() {
      return position_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!data_.isEmpty()) {
        output.writeBytes(1, data_);
      }
      if (position_ != 0L) {
        output.writeInt64(2, position_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      if (position_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, position_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.crob1140.filetransfer.UploadRequest.FileChunk)) {
        return super.equals(obj);
      }
      com.github.crob1140.filetransfer.UploadRequest.FileChunk other = (com.github.crob1140.filetransfer.UploadRequest.FileChunk) obj;

      boolean result = true;
      result = result && getData()
          .equals(other.getData());
      result = result && (getPosition()
          == other.getPosition());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (37 * hash) + POSITION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPosition());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.crob1140.filetransfer.UploadRequest.FileChunk prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code UploadRequest.FileChunk}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:UploadRequest.FileChunk)
        com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileChunk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileChunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.crob1140.filetransfer.UploadRequest.FileChunk.class, com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder.class);
      }

      // Construct using com.github.crob1140.filetransfer.UploadRequest.FileChunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        data_ = com.google.protobuf.ByteString.EMPTY;

        position_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_FileChunk_descriptor;
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileChunk getDefaultInstanceForType() {
        return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileChunk build() {
        com.github.crob1140.filetransfer.UploadRequest.FileChunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.crob1140.filetransfer.UploadRequest.FileChunk buildPartial() {
        com.github.crob1140.filetransfer.UploadRequest.FileChunk result = new com.github.crob1140.filetransfer.UploadRequest.FileChunk(this);
        result.data_ = data_;
        result.position_ = position_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.crob1140.filetransfer.UploadRequest.FileChunk) {
          return mergeFrom((com.github.crob1140.filetransfer.UploadRequest.FileChunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.crob1140.filetransfer.UploadRequest.FileChunk other) {
        if (other == com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance()) return this;
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        if (other.getPosition() != 0L) {
          setPosition(other.getPosition());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.crob1140.filetransfer.UploadRequest.FileChunk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.crob1140.filetransfer.UploadRequest.FileChunk) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 1;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 1;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 1;</code>
       */
      public Builder clearData() {
        
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      private long position_ ;
      /**
       * <code>optional int64 position = 2;</code>
       */
      public long getPosition() {
        return position_;
      }
      /**
       * <code>optional int64 position = 2;</code>
       */
      public Builder setPosition(long value) {
        
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 position = 2;</code>
       */
      public Builder clearPosition() {
        
        position_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:UploadRequest.FileChunk)
    }

    // @@protoc_insertion_point(class_scope:UploadRequest.FileChunk)
    private static final com.github.crob1140.filetransfer.UploadRequest.FileChunk DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.crob1140.filetransfer.UploadRequest.FileChunk();
    }

    public static com.github.crob1140.filetransfer.UploadRequest.FileChunk getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FileChunk>
        PARSER = new com.google.protobuf.AbstractParser<FileChunk>() {
      public FileChunk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FileChunk(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FileChunk> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FileChunk> getParserForType() {
      return PARSER;
    }

    public com.github.crob1140.filetransfer.UploadRequest.FileChunk getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int valueCase_ = 0;
  private java.lang.Object value_;
  public enum ValueCase
      implements com.google.protobuf.Internal.EnumLite {
    METADATA(1),
    CHUNK(2),
    VALUE_NOT_SET(0);
    private final int value;
    private ValueCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValueCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValueCase forNumber(int value) {
      switch (value) {
        case 1: return METADATA;
        case 2: return CHUNK;
        case 0: return VALUE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValueCase
  getValueCase() {
    return ValueCase.forNumber(
        valueCase_);
  }

  public static final int METADATA_FIELD_NUMBER = 1;
  /**
   * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequest.FileMetadata getMetadata() {
    if (valueCase_ == 1) {
       return (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
  }
  /**
   * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder getMetadataOrBuilder() {
    if (valueCase_ == 1) {
       return (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
  }

  public static final int CHUNK_FIELD_NUMBER = 2;
  /**
   * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequest.FileChunk getChunk() {
    if (valueCase_ == 2) {
       return (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
  }
  /**
   * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
   */
  public com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder getChunkOrBuilder() {
    if (valueCase_ == 2) {
       return (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_;
    }
    return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (valueCase_ == 1) {
      output.writeMessage(1, (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_);
    }
    if (valueCase_ == 2) {
      output.writeMessage(2, (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (valueCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_);
    }
    if (valueCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.crob1140.filetransfer.UploadRequest)) {
      return super.equals(obj);
    }
    com.github.crob1140.filetransfer.UploadRequest other = (com.github.crob1140.filetransfer.UploadRequest) obj;

    boolean result = true;
    result = result && getValueCase().equals(
        other.getValueCase());
    if (!result) return false;
    switch (valueCase_) {
      case 1:
        result = result && getMetadata()
            .equals(other.getMetadata());
        break;
      case 2:
        result = result && getChunk()
            .equals(other.getChunk());
        break;
      case 0:
      default:
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    switch (valueCase_) {
      case 1:
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CHUNK_FIELD_NUMBER;
        hash = (53 * hash) + getChunk().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.crob1140.filetransfer.UploadRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.crob1140.filetransfer.UploadRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code UploadRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:UploadRequest)
      com.github.crob1140.filetransfer.UploadRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.crob1140.filetransfer.UploadRequest.class, com.github.crob1140.filetransfer.UploadRequest.Builder.class);
    }

    // Construct using com.github.crob1140.filetransfer.UploadRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      valueCase_ = 0;
      value_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.crob1140.filetransfer.FileTransferOuterClass.internal_static_UploadRequest_descriptor;
    }

    public com.github.crob1140.filetransfer.UploadRequest getDefaultInstanceForType() {
      return com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance();
    }

    public com.github.crob1140.filetransfer.UploadRequest build() {
      com.github.crob1140.filetransfer.UploadRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.github.crob1140.filetransfer.UploadRequest buildPartial() {
      com.github.crob1140.filetransfer.UploadRequest result = new com.github.crob1140.filetransfer.UploadRequest(this);
      if (valueCase_ == 1) {
        if (metadataBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = metadataBuilder_.build();
        }
      }
      if (valueCase_ == 2) {
        if (chunkBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = chunkBuilder_.build();
        }
      }
      result.valueCase_ = valueCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.crob1140.filetransfer.UploadRequest) {
        return mergeFrom((com.github.crob1140.filetransfer.UploadRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.crob1140.filetransfer.UploadRequest other) {
      if (other == com.github.crob1140.filetransfer.UploadRequest.getDefaultInstance()) return this;
      switch (other.getValueCase()) {
        case METADATA: {
          mergeMetadata(other.getMetadata());
          break;
        }
        case CHUNK: {
          mergeChunk(other.getChunk());
          break;
        }
        case VALUE_NOT_SET: {
          break;
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.crob1140.filetransfer.UploadRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.crob1140.filetransfer.UploadRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public ValueCase
        getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public Builder clearValue() {
      valueCase_ = 0;
      value_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata, com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder, com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder> metadataBuilder_;
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileMetadata getMetadata() {
      if (metadataBuilder_ == null) {
        if (valueCase_ == 1) {
          return (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
      } else {
        if (valueCase_ == 1) {
          return metadataBuilder_.getMessage();
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public Builder setMetadata(com.github.crob1140.filetransfer.UploadRequest.FileMetadata value) {
      if (metadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        metadataBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public Builder setMetadata(
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder builderForValue) {
      if (metadataBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        metadataBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public Builder mergeMetadata(com.github.crob1140.filetransfer.UploadRequest.FileMetadata value) {
      if (metadataBuilder_ == null) {
        if (valueCase_ == 1 &&
            value_ != com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance()) {
          value_ = com.github.crob1140.filetransfer.UploadRequest.FileMetadata.newBuilder((com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 1) {
          metadataBuilder_.mergeFrom(value);
        }
        metadataBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public Builder clearMetadata() {
      if (metadataBuilder_ == null) {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
        }
        metadataBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder getMetadataBuilder() {
      return getMetadataFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder getMetadataOrBuilder() {
      if ((valueCase_ == 1) && (metadataBuilder_ != null)) {
        return metadataBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 1) {
          return (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest.FileMetadata metadata = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest.FileMetadata, com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder, com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder> 
        getMetadataFieldBuilder() {
      if (metadataBuilder_ == null) {
        if (!(valueCase_ == 1)) {
          value_ = com.github.crob1140.filetransfer.UploadRequest.FileMetadata.getDefaultInstance();
        }
        metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.crob1140.filetransfer.UploadRequest.FileMetadata, com.github.crob1140.filetransfer.UploadRequest.FileMetadata.Builder, com.github.crob1140.filetransfer.UploadRequest.FileMetadataOrBuilder>(
                (com.github.crob1140.filetransfer.UploadRequest.FileMetadata) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 1;
      onChanged();;
      return metadataBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest.FileChunk, com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder, com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder> chunkBuilder_;
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileChunk getChunk() {
      if (chunkBuilder_ == null) {
        if (valueCase_ == 2) {
          return (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
      } else {
        if (valueCase_ == 2) {
          return chunkBuilder_.getMessage();
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public Builder setChunk(com.github.crob1140.filetransfer.UploadRequest.FileChunk value) {
      if (chunkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        chunkBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public Builder setChunk(
        com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder builderForValue) {
      if (chunkBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        chunkBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public Builder mergeChunk(com.github.crob1140.filetransfer.UploadRequest.FileChunk value) {
      if (chunkBuilder_ == null) {
        if (valueCase_ == 2 &&
            value_ != com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance()) {
          value_ = com.github.crob1140.filetransfer.UploadRequest.FileChunk.newBuilder((com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 2) {
          chunkBuilder_.mergeFrom(value);
        }
        chunkBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public Builder clearChunk() {
      if (chunkBuilder_ == null) {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
        }
        chunkBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder getChunkBuilder() {
      return getChunkFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    public com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder getChunkOrBuilder() {
      if ((valueCase_ == 2) && (chunkBuilder_ != null)) {
        return chunkBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 2) {
          return (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_;
        }
        return com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
      }
    }
    /**
     * <code>optional .UploadRequest.FileChunk chunk = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.crob1140.filetransfer.UploadRequest.FileChunk, com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder, com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder> 
        getChunkFieldBuilder() {
      if (chunkBuilder_ == null) {
        if (!(valueCase_ == 2)) {
          value_ = com.github.crob1140.filetransfer.UploadRequest.FileChunk.getDefaultInstance();
        }
        chunkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.crob1140.filetransfer.UploadRequest.FileChunk, com.github.crob1140.filetransfer.UploadRequest.FileChunk.Builder, com.github.crob1140.filetransfer.UploadRequest.FileChunkOrBuilder>(
                (com.github.crob1140.filetransfer.UploadRequest.FileChunk) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 2;
      onChanged();;
      return chunkBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:UploadRequest)
  }

  // @@protoc_insertion_point(class_scope:UploadRequest)
  private static final com.github.crob1140.filetransfer.UploadRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.crob1140.filetransfer.UploadRequest();
  }

  public static com.github.crob1140.filetransfer.UploadRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UploadRequest>
      PARSER = new com.google.protobuf.AbstractParser<UploadRequest>() {
    public UploadRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new UploadRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UploadRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UploadRequest> getParserForType() {
    return PARSER;
  }

  public com.github.crob1140.filetransfer.UploadRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

